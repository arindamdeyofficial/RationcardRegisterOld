#pragma checksum "D:\OneDrive\Websites\rationcardregister.com\RationcardRegister\RationcardRegister\RationcardRegister\Views\Home\Geolocation_Client.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "874207cb70beb6f0733bfbaf6f832d77533dc25a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Geolocation_Client), @"mvc.1.0.view", @"/Views/Home/Geolocation_Client.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Geolocation_Client.cshtml", typeof(AspNetCore.Views_Home_Geolocation_Client))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\OneDrive\Websites\rationcardregister.com\RationcardRegister\RationcardRegister\RationcardRegister\Views\_ViewImports.cshtml"
using RationcardRegister;

#line default
#line hidden
#line 2 "D:\OneDrive\Websites\rationcardregister.com\RationcardRegister\RationcardRegister\RationcardRegister\Views\_ViewImports.cshtml"
using RationcardRegister.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"874207cb70beb6f0733bfbaf6f832d77533dc25a", @"/Views/Home/Geolocation_Client.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"19b3cc1a5af0f080b7728f20038fb1d4be08e1ba", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Geolocation_Client : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\OneDrive\Websites\rationcardregister.com\RationcardRegister\RationcardRegister\RationcardRegister\Views\Home\Geolocation_Client.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(27, 10439, true);
            WriteLiteral(@"<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 500px;
        width:1000px;
    }
</style>
<p id=""locationText""></p>
<input type=""button"" id=""btnShowMap"" value=""Show in Map"" />
<div data-lat="""" data-lng="""" data-info="""" style=""display:none"" id=""divData""></div>
<div id=""map""></div>
<div id=""content"">
    You are here!
</div>

<script async defer
        src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyA13qCpglQCSzEPK57P1r-C4CBU9e1pO5A&callback=initMap"">
</script>
<script>
    var map;
    // In the following example, markers appear when the user clicks on the map.
    // Each marker is labeled with a single alphabetical character.
    var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var labelIndex = 0;
    $('#btnShowMap').click(function () {
        drawMap(parseFloat($('#divData').attr(""data-lat"")), parseFloat($('#divData').attr(""data-lng"")), $('#divData').attr(""data-info""));");
            WriteLiteral(@"
    });
    function getLocation() {

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            $('#locationText').html(""Geolocation is not supported by this browser."");
        }
    }

    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                $('#locationText').html(""Please allow Geolocation to continue.  Please try reloading the site and click on allow."");
                break;
            case error.POSITION_UNAVAILABLE:
                $('#locationText').html(""Location information is unavailable. Please try reloading the site."");
                break;
            case error.TIMEOUT:
                $('#locationText').html(""The request to get user location timed out. Please try reloading the site."");
                break;
            case error.UNKNOWN_ERROR:
                $('#locationText').html(""An unknown error occurred. Please ");
            WriteLiteral(@"try reloading the site. If problem continues please contact administrator."");
                break;
        }
    }

    function showPosition(position) {
        //text position
        $('#locationText').html(""Latitude: "" + position.coords.latitude + ""<br>Longitude: "" + position.coords.longitude + ""<br>accurate upto ""
            + position.coords.accuracy + "" meters"" + ""<br>at timestamp: "" + position.timestamp);

        fetchAddressFromGoogle(position.coords.latitude, position.coords.longitude, logPositionInfo);
        
        //googlemap position
        //var latlon = position.coords.latitude + "","" + position.coords.longitude;
        //var img_url = ""https://maps.googleapis.com/maps/api/staticmap?center="" + latlon + ""&zoom=14&size=400x300&sensor=false&key=AIzaSyA13qCpglQCSzEPK57P1r-C4CBU9e1pO5A"";
        //$(""#map"").html(""<img src='"" + img_url + ""'>"");
        
    }

    function logPositionInfo(latitude, longitude, info) {
        $('#locationText').append(""<br/>"" + info.join(""");
            WriteLiteral(@"<br/>""));
        $('#divData').attr(""data-lat"", latitude);
        $('#divData').attr(""data-lng"", longitude);
        $('#divData').attr(""data-info"", info[0]);
    }

    function fetchAddressFromGoogle(latitude, longitude, callback) {
        var infoToShow = [];
        $.ajax({
            url: 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latitude + ',' + longitude + '&key=AIzaSyA13qCpglQCSzEPK57P1r-C4CBU9e1pO5A',
            method: 'GET',
            success: function (data, textStatus, jqXHR) {
                for (var i = 0; i < data.results.length; i++) {
                    infoToShow[i] = data.results[i].formatted_address;
                }
                if (callback != undefined) {
                    callback(latitude, longitude, infoToShow);
                }
            },
            error: function (error, status, jqXHR) {
                isServicecallComplete = true;
            }
        });
    }

    function drawMap(latitude, longitude, info) {");
            WriteLiteral(@"

        // Create a new StyledMapType object, passing it an array of styles,
        // and the name to be displayed on the map type control.
        var styledMapType = new google.maps.StyledMapType(
            [
                { elementType: 'geometry', stylers: [{ color: '#ebe3cd' }] },
                { elementType: 'labels.text.fill', stylers: [{ color: '#523735' }] },
                { elementType: 'labels.text.stroke', stylers: [{ color: '#f5f1e6' }] },
                {
                    featureType: 'administrative',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#c9b2a6' }]
                },
                {
                    featureType: 'administrative.land_parcel',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#dcd2be' }]
                },
                {
                    featureType: 'administrative.land_parcel',
                    elementType: 'labels.text.fill',
   ");
            WriteLiteral(@"                 stylers: [{ color: '#ae9e90' }]
                },
                {
                    featureType: 'landscape.natural',
                    elementType: 'geometry',
                    stylers: [{ color: '#dfd2ae' }]
                },
                {
                    featureType: 'poi',
                    elementType: 'geometry',
                    stylers: [{ color: '#dfd2ae' }]
                },
                {
                    featureType: 'poi',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#93817c' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'geometry.fill',
                    stylers: [{ color: '#a5b076' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#447530' }]
                },
              ");
            WriteLiteral(@"  {
                    featureType: 'road',
                    elementType: 'geometry',
                    stylers: [{ color: '#f5f1e6' }]
                },
                {
                    featureType: 'road.arterial',
                    elementType: 'geometry',
                    stylers: [{ color: '#fdfcf8' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry',
                    stylers: [{ color: '#f8c967' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#e9bc62' }]
                },
                {
                    featureType: 'road.highway.controlled_access',
                    elementType: 'geometry',
                    stylers: [{ color: '#e98d58' }]
                },
                {
                    featureType: 'road.highway.controlled_acc");
            WriteLiteral(@"ess',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#db8555' }]
                },
                {
                    featureType: 'road.local',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#806b63' }]
                },
                {
                    featureType: 'transit.line',
                    elementType: 'geometry',
                    stylers: [{ color: '#dfd2ae' }]
                },
                {
                    featureType: 'transit.line',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#8f7d77' }]
                },
                {
                    featureType: 'transit.line',
                    elementType: 'labels.text.stroke',
                    stylers: [{ color: '#ebe3cd' }]
                },
                {
                    featureType: 'transit.station',
                    elementType: 'geometry'");
            WriteLiteral(@",
                    stylers: [{ color: '#dfd2ae' }]
                },
                {
                    featureType: 'water',
                    elementType: 'geometry.fill',
                    stylers: [{ color: '#b9d3c2' }]
                },
                {
                    featureType: 'water',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#92998d' }]
                }
            ],
            { name: 'Styled Map' });

        var myLatLng = { lat: latitude, lng: longitude };
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 18,
            center: myLatLng,
            mapTypeControlOptions: {
                mapTypeIds: ['roadmap', 'satellite', 'hybrid', 'terrain',
                    'styled_map']
            }
        });

        //Associate the styled map with the MapTypeId and set it to display.
        map.mapTypes.set('styled_map', styledMapType);
        map.setMapTypeId");
            WriteLiteral(@"('styled_map');

        // This event listener calls addMarker() when the map is clicked.
        google.maps.event.addListener(map, 'click', function (event) {
            fetchAddressFromGoogle(event.latLng.lat(), event.latLng.lng(), addMarkerOnClick);
        });

        addMarker(latitude, longitude, info); 
    }

    function addMarkerOnClick(latitude, longitude, info) {
        addMarker(latitude, longitude, info[0]);
    }

    function addMarker(latitude, longitude, info) {
        // Add the marker at the clicked location, and add the next-available label
        // from the array of alphabetical characters.
        var marker = new google.maps.Marker({
            position: { lat: latitude, lng: longitude },
            label: labels[labelIndex++ % labels.length],
            map: map,
            title: 'Your Location'
        }); 
        var infowindow = new google.maps.InfoWindow({
            content: info
        });
        marker.addListener('click', function () ");
            WriteLiteral("{\r\n            infowindow.open(map, marker);\r\n        });\r\n        infowindow.open(map, marker);\r\n        return marker;\r\n    }\r\n\r\n    function initMap() {\r\n        getLocation();\r\n    }\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
